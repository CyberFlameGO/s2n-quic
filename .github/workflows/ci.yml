on:
  push:
    branches:
      - main
#  pull_request:
#    branches:
#     - main

name: ci

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: 1
  # Pin the nightly toolchain to prevent breakage.
  # This should be occasionally updated.
  RUST_NIGHTLY_TOOLCHAIN: nightly-2021-11-17

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      rust-versions: ${{ steps.definitions.outputs.versions }}
      msrv: ${{ steps.definitions.outputs.msrv }}
    steps:
      - uses: actions/checkout@v2

      - name: Evaluate definitions
        id: definitions
        run: |
          export MSRV=$(cat rust-toolchain | awk '{$1=$1};1')
          echo "::set-output name=msrv::$MSRV"
          export RAW_VERSIONS="stable beta $RUST_NIGHTLY_TOOLCHAIN $MSRV"
          export VERSIONS=$(echo $RAW_VERSIONS | jq -scR 'rtrimstr("\n")|split(" ")|.')
          echo "::set-output name=versions::$VERSIONS"

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: --all -- --check

  clippy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, beta]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
          components: clippy

      - uses: camshaft/rust-cache@v1

      # TODO convert the json output into GHA annotations
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1.0.7
        with:
          command: clippy
          args: --all-features --all-targets -- -D warnings

  udeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true

      - uses: camshaft/rust-cache@v1

      - uses: camshaft/install@v1
        with:
          crate: cargo-udeps

      - name: Run cargo udeps
        run: cargo udeps --workspace --all-targets
        env:
          RUSTC_WRAPPER: ''

  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: camshaft/rust-cache@v1

      - name: Run cargo doc
        uses: actions-rs/cargo@v1.0.3
        with:
          command: doc
          args: --all-features --no-deps --workspace --exclude duvet --exclude s2n-quic-qns

      - uses: actions/upload-artifact@v2
        with:
          name: report-doc
          path: target/doc

  test:
    runs-on: ${{ matrix.os }}
    needs: env
    strategy:
      matrix:
        rust: ${{ fromJson(needs.env.outputs.rust-versions) }}
        os: [ubuntu-latest, macOS-latest, windows-latest]
        target: [native]
        include:
          - os: windows-latest
            # s2n-tls doesn't currently build on windows
            exclude: --workspace --exclude s2n-tls-sys --exclude s2n-tls --exclude s2n-quic-tls
          - rust: stable
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.target != 'native' && matrix.target || '' }}

      - name: Install cross
        if: ${{ matrix.target != 'native' }}
        uses: camshaft/install@v1
        with:
          crate: cross

      - uses: camshaft/rust-cache@v1
        with:
          key: ${{ matrix.target }}

      - name: Restore fuzz corpus
        shell: bash
        run: |
          find . -name 'corpus.tar.gz' -exec dirname {} ';' | xargs -L 1 bash -c 'cd "$0" && rm -rf corpus && tar xf corpus.tar.gz'

      # Build the tests before running to improve cross compilation speed
      - name: Run cargo build
        uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --tests ${{ matrix.exclude }} ${{ matrix.target != 'native' && format('--target {0}', matrix.target) || '' }}
          use-cross: ${{ matrix.target != 'native' }}

      - name: Run cargo test
        uses: actions-rs/cargo@v1.0.3
        with:
          command: test
          args: ${{ matrix.exclude }} ${{ matrix.target != 'native' && format('--target {0}', matrix.target) || '' }}
          use-cross: ${{ matrix.target != 'native' }}

  miri:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate: [quic/s2n-quic-core]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          components: miri, rust-src

      - uses: camshaft/rust-cache@v1
        with:
          key: ${{ matrix.crate }}

      - name: ${{ matrix.crate }}
        # Disabling capture speeds up miri execution: https://github.com/rust-lang/miri/issues/1780#issuecomment-830664528
        run: cd ${{ matrix.crate }} && cargo miri test -- --nocapture
        env:
          # needed to read corpus files from filesystem
          MIRIFLAGS: -Zmiri-disable-isolation

  no_std:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          target: thumbv7m-none-eabi

      - uses: camshaft/rust-cache@v1

      - name: Run cargo build
        run: ./scripts/test_no_std ${{ env.RUST_NIGHTLY_TOOLCHAIN }}

  compliance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          override: true

      - uses: camshaft/rust-cache@v1

      - name: Clean up cache
        run: rm -f target/release/duvet

      - name: Cache duvet
        uses: actions/cache@v2.1.7
        continue-on-error: true
        with:
          path: target/release/duvet
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-duvet-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('common/duvet/**') }}

      - name: Build duvet
        run: test -f target/release/duvet || cargo build --bin duvet --release

      - name: Run duvet
        run: ./scripts/compliance ${{ github.sha }}

      - uses: actions/upload-artifact@v2
        with:
          name: report-compliance
          path: target/compliance

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true

      - name: Restore fuzz corpus
        run: |
          find . -name 'corpus.tar.gz' -exec dirname {} ';' | xargs -L 1 bash -c 'cd "$0" && rm -rf corpus && tar xf corpus.tar.gz'

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          components: llvm-tools-preview

      - uses: camshaft/rust-cache@v1

      - name: Install cargo-llvm-cov
        run: curl -LsSf https://github.com/taiki-e/cargo-llvm-cov/releases/latest/download/cargo-llvm-cov-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin

      - name: Run cargo test
        uses: actions-rs/cargo@v1.0.3
        with:
          command: llvm-cov
          args: --html --no-fail-fast --workspace --exclude s2n-quic-qns --exclude s2n-quic-events --exclude cargo-compliance --all-features

      - uses: actions/upload-artifact@v2
        with:
          name: report-coverage
          path: target/llvm-cov/html

  examples:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: [examples/echo, examples/rustls-provider, examples/dos-mitigation]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          override: true

      - uses: camshaft/rust-cache@v1
        with:
          key: ${{ matrix.example }}

      - name: ${{ matrix.example }}
        working-directory: ${{ matrix.example }}
        # TODO make sure the example actually runs as well
        run: cargo build

  recovery-simulations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: camshaft/rust-cache@v1

      - name: Run simulations
        run: |
          ./scripts/recovery-sim

      - uses: actions/upload-artifact@v2
        with:
          name: report-recovery-sim
          path: target/recovery-sim

  copyright:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check
        run: |
          ./scripts/copyright_check

  # ensures the event codegen is up to date
  events:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true
          components: rustfmt

      - uses: camshaft/rust-cache@v1

      - name: Run events codegen
        run: |
          cargo run --bin s2n-quic-events

      - name: Check to make sure the generated events are up-to-date
        run: |
          git diff --exit-code || \
            echo "::error ::Modified events need to be generated with `cargo run --bin s2n-quic-events` and committed"

  # ensures there are no unused snapshots
  snapshots:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install cargo-insta
        uses: camshaft/install@v1
        with:
          crate: cargo-insta

      - uses: camshaft/rust-cache@v1

      - name: Run cargo insta test
        run: |
          cargo insta test --delete-unreferenced-snapshots

      - name: Check to make sure there are no unused snapshots
        run: |
          git diff --exit-code || \
            echo "::error ::One or more snapshots were not used"

  # generates a report of time spent in compilation
  # https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#timings
  timing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true

      - name: Run cargo build
        run: |
          cd examples/echo
          cargo build -Z timings --release

      - uses: actions/upload-artifact@v2
        with:
          name: report-timing
          path: examples/echo/cargo-timing.html

  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: camshaft/install@v1
        with:
          crate: typos-cli
          bins: typos

      - name: Run typos
        run: |
          ./scripts/typos --format json | tee /tmp/typos.json | jq -rs '.[] | "::error file=\(.path),line=\(.line_num),col=\(.byte_offset)::\(.typo) should be \"" + (.corrections // [] | join("\" or \"") + "\"")'
          cat /tmp/typos.json
          ! grep -q '[^[:space:]]' /tmp/typos.json
